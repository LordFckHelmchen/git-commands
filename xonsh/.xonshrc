###############################################################################
# Environment variables
###############################################################################

$UPDATE_OS_ENVIRON = True
$XONSH_SHOW_TRACEBACK = True



###############################################################################
# Set up logging
###############################################################################

import logging
import sys

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler(stream=sys.stdout)
console_handler.setFormatter(logging.Formatter("{levelname}:{name}: {message}", style="{"))
logger.addHandler(console_handler)

del console_handler
del logging



###############################################################################
# Local bin paths
###############################################################################

from pathlib import Path

home_path = Path($HOME)

def prepend_to_path(file_or_folder: Path, path_var = $PATH) -> None:
     """
     Add the name of a directory or file to the front of the given path variable

     If file_or_folder does not exist, nothing will be done!
     If file_or_folder is already on the path variable, it will be moved to the
     front.
     """

     file_or_folder = file_or_folder.expanduser()
     if not file_or_folder.exists():
        msg = f"Entry doesn't exist - won't add it to PATH: '{file_or_folder}'"
        logger.warning(msg)
        return

     file_or_folder = str(file_or_folder)
     if file_or_folder in path_var:
        msg = f"Entry already on PATH - moving it to front: '{file_or_folder}'"
        logger.info(msg)
        path_var.remove(file_or_folder)

     path_var.insert(0, file_or_folder)

# Git commands
prepend_to_path(Path($ProgramFiles) / "Git" / "usr" / "bin")

# Pyenv
$PYENV_HOME = str(home_path / ".pyenv" / "pyenv-win")
$PYENV_ROOT = $PYENV_HOME
$PYENV      = $PYENV_HOME
for sub_dir in ["bin", "shims"]:
    prepend_to_path(Path($PYENV_HOME) / sub_dir)
del sub_dir

# Poetry
$POETRY_HOME = str(home_path / ".poetry")
prepend_to_path(Path($POETRY_HOME) / "bin")

# Starship
prepend_to_path(home_path / "AppData" / "Local" / "starship")

# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# import sys as _sys
# from types import ModuleType as _ModuleType
# $CONDA_DEFAULT_ENV = "base"
# $CONDA_EXE = str(Path("C:/Program Files/Anaconda3/Scripts/conda.exe"))
# _mod = _ModuleType("xontrib.conda",
#                    "Autogenerated from $(/C/Program Files/Anaconda3/Scripts/conda.exe shell.xonsh hook)")
# __xonsh__.execer.exec($($CONDA_EXE "shell.xonsh" "hook"),
#                       glbs=_mod.__dict__,
#                       filename=f"$({$CONDA_EXE} shell.xonsh hook)")
# _sys.modules["xontrib.conda"] = _mod
# del _sys, _mod, _ModuleType
# # <<< conda initialize <<<



###############################################################################
# Completions
###############################################################################

prepend_to_path(home_path / "bash_completion.d")



###############################################################################
# Xontribs
###############################################################################

xontrib load \
    bashisms \
    coreutils \
    pipeliner \
    prompt_starship \
    whole_word_jumping \



###############################################################################
# Aliases
###############################################################################

aliases.update({
    # Default aliases
    "grep": "grep --color=auto",
    "ls": "ls --color=auto",
    "ll": "ls -alF",
    "la": "ls -A",
    "l": "ls -CF",
    # Show tree of current directory (folders only)
    "dirtree": 'ls -R . | grep ":$" | sed -e "s/:$//" -e "s/[^\/]*\//|  /g" -e "s/|  \([^|]\)/|–– \1/g"',
    # Git status
    "gits": "git status",
    # Git fetch, update, prune
    "gitup": "git fetch --all --prune && git pull",
    # -diff ignoring all sorts of whitespaces.
    "gitd": "git diff --ignore-space-at-eol --ignore-space-change --ignore-all-space --ignore-blank-lines --minimal",
    # -branch listing author and date on remotes.
    "gitlist": 'git for-each-ref --sort=committerdate refs/remotes --format="%(color:yellow)%(committerdate:relative)%(color:reset)|%(HEAD) %(color:green)%(refname:short)%(color:reset)|%(authorname)|%(contents:subject)" | column -t -s"|" | cut -c 1-180',
    # Show file tree, ignoring git files; taken from https://stackoverflow.com/a/61565622/5202331
    "gittree": 'git ls-tree --full-name --name-only -tr HEAD | sed -e "s/[^-][^\/]*\//   |/g" -e "s/|\([^ ]\)/|-- \1/"',
    # List last commits as oneliners
    "gitl": "git log --oneline --max-count 10",
    })



###############################################################################
# Cleanup
###############################################################################

del home_path

logger.info(f"Done initializing. Running on Python: {sys.version}")
del logger
del sys
